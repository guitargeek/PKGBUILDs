# Maintainer: Jonas Rembser <jonas.rembser@gmail.com>

pkgname=coral
pkgver=2.3.21
pkgrel=1
arch=("i686" "x86_64")
url="https://github.com/cms-externals/coral"
makedepends=("git")
provides=("coral")
source=("git+https://github.com/cms-externals/coral"
        "0001-refresh-coral-for-cmake-compilation.patch")
sha512sums=('SKIP'
            '201503fb3a064429da39028832d3e7724abeb0aafffdf7e13dfcd2bbee4d9a9581091fb6be5dcb16a4a6d30da125a396d3d69c2b848f9cb165162b2642721ecb')

prepare() {
    ORIGINAL_PWD=$PWD
    cd "${srcdir}/coral"
    git am < $startdir/0001-refresh-coral-for-cmake-compilation.patch
    cd $ORIGINAL_PWD

    mkdir include
    cp -r coral/CoralBase/CoralBase include
    cp -r coral/CoralCommon/CoralCommon include
    cp -r coral/CoralKernel/CoralKernel include
    cp -r coral/RelationalAccess/RelationalAccess include
    cp -r coral/PyCoral/PyCoral include

    echo 'import shutil
import os
import subprocess
import yaml
import xml.etree.ElementTree as ET


with open("config.yml", "r") as f:
    config = yaml.safe_load(f)

cmake_includes = ["include_directories(.)", ""]

for root, directories, files in os.walk("coral"):
    if root.count("/") == 1:
        package = root[6:]

        if package in config["whitelisted-packages"]:

            cmake_includes += ["add_subdirectory(" + package + ")"]

            with open(os.path.join(root, "CMakeLists.txt"), "w") as f:
                for directory in directories:
                    f.write("add_subdirectory(" + directory + ")\n")

    for file in files:

        if file == "BuildFile.xml":

            libname = package.replace("/", "")

            cmake = config["cmake-lib-base"][:]

            with open(os.path.join(root, file)) as f:
                xml = f.read()
            root_node = ET.fromstring("<root>" + xml + "</root>")

            cmake += ["add_library(" + libname + " SHARED ${SOURCE_FILES})", ""]

            for elem in root_node:
                if elem.tag == "use":
                    dependency = elem.get("name").replace("/", "")

                    if dependency in config["requirements-rename"]:
                        dependency = config["requirements-rename"][dependency]

                    if dependency == "boost":
                        cmake += [
                            "find_package( Boost COMPONENTS filesystem REQUIRED )",
                            "target_link_libraries(" + libname + " ${Boost_LIBRARIES})",
                        ]
                    elif dependency == "python":
                        cmake += [
                            "include_directories(/usr/include/python2.7)",
                            "target_link_libraries(" + libname + " python2.7)",
                        ]
                    else:
                        cmake += ["target_link_libraries(" + libname + " " + dependency + ")"]

            cmake += [
                """install(TARGETS """
                + libname
                + """
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})"""
            ]

            with open(os.path.join(root, "CMakeLists.txt"), "w") as f:
                f.write("\n".join(cmake))

with open("coral/CMakeLists.txt", "w") as f:
    f.write("\n".join(cmake_includes))' > generate_cmake.py

    echo 'whitelisted-packages:
  - ConnectionService
  - CoralBase
  - CoralCommon
  - CoralKernel
  - RelationalAccess
  - MonitoringService
  - SQLiteAccess
  - XMLAuthenticationService
  - EnvironmentAuthenticationService
  - XMLLookupService
  - PyCoral

requirements-rename:
    libuuid: uuid
    LCGCoralCommon: CoralCommon
    LCGRelationalAccess: RelationalAccess
    LCGCoralBase: CoralBase
    LCGCoralKernel: CoralKernel
    sqlite: sqlite3

cmake-lib-base:
  - cmake_minimum_required(VERSION 3.2)
  - set(CMAKE_CXX_STANDARD 17)
  - set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
  - file(GLOB_RECURSE SOURCE_FILES "src/*.c*")
  - include_directories(.)' > config.yml

    python generate_cmake.py

    echo "cmake_minimum_required(VERSION 3.2)
set(CMAKE_CXX_STANDARD 17)
project(Coral)
include_directories(include)
add_subdirectory(coral)
include(GNUInstallDirs)" > CMakeLists.txt

    mkdir build
}

build() {
    cd build
    cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr -DCMAKE_INSTALL_LIBDIR:PATH=lib ..

    make -j8
}

package() {
    mkdir $pkgdir/usr
    cp -r include $pkgdir/usr
    cd build
    make DESTDIR="$pkgdir/" install
}
